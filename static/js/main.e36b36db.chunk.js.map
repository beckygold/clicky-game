{"version":3,"sources":["components/Wrapper/index.js","components/NavBar/index.js","components/Header/index.js","components/Image/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","NavBar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Header","Image","onClick","clickFunction","src","alt","name","Footer","App","state","images","clickImage","event","preventDefault","console","log","target","_this2","this","components_NavBar","components_Header","components_Wrapper","map","image","components_Image","key","process","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+oCAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCqB1BC,MAtBf,WACI,OAAOL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDAClBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAjC,UACAN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBI,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACxJZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAEpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BU,GAAG,aACzCb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWG,KAAK,KAA7B,UAEJN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWG,KAAK,KAA7B,YAEJN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWG,KAAK,KAA7B,2BCNLQ,MATf,WACI,OAAOd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,iGCkBGY,MAtBf,SAAgBhB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OACJc,QAASjB,EAAMkB,cACfC,IAAKnB,EAAMmB,IACXL,GAAId,EAAMc,GACVM,IAAKpB,EAAMqB,KAEXjB,UAAU,mBCJCkB,MAJf,WACI,OAAOrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,uBC+DImB,oNAzDbC,MAAQ,CAENC,YAMFC,WAAa,SAAAC,GACXA,EAAMC,iBAENC,QAAQC,IAAIH,EAAMI,OAAOZ,8EAoBlB,IAAAa,EAAAC,KACP,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,UACAjC,EAAAC,EAAAC,cAACgC,EAAD,UACAlC,EAAAC,EAAAC,cAACiC,EAAD,KAEGH,KAAKT,MAAMC,OAAOY,IAAI,SAAAC,GAAK,OAE1BrC,EAAAC,EAAAC,cAACoC,EAAD,CACErB,cAAec,EAAKN,WACpBc,IAAKF,EAAMxB,GACXA,GAAIwB,EAAMxB,GACVO,KAAMiB,EAAMjB,KACZF,IAAKsB,eAAyBH,EAAMnB,SAM1ClB,EAAAC,EAAAC,cAACuC,EAAD,cApDUC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e36b36db.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar() {\r\n    return <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">ALERT</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">Score: </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">High Score: </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </nav>;\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">The Clicky Game</h1>\r\n            <p className=\"lead\">Click on an image to earn points - but don't click on it more than once or you lose!</p>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Image (props)  {\r\n    return (\r\n        <img \r\n    onClick={props.clickFunction}\r\n    src={props.src} \r\n    id={props.id}\r\n    alt={props.name} \r\n    // className=\"img-thumbnail\" \r\n    className=\"rounded\" \r\n    />\r\n\r\n    );\r\n};\r\n\r\n// const Image = props = (\r\n//     <img \r\n//     src={props.src} \r\n//     id={props.id}\r\n//     alt={props.name} \r\n//     className=\"img-thumbnail\" />\r\n// );\r\n\r\nexport default Image;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return <div className='Footer'>Clicky Game</div>\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport NavBar from './components/NavBar';\nimport Header from './components/Header';\nimport Image from './components/Image';\nimport Footer from './components/Footer';\nimport images from \"./images.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    // score,\n    images,\n    // clicked\n  };\n\n\n  // Listen for image clicks\n  clickImage = event => {\n    event.preventDefault()\n\n    console.log(event.target.src)\n    // Check to see if image has been clicked already\n\n    // If clicked = false, +1 to score\n\n    // Change 'clicked: false' -> 'clicked: true'\n\n    // Alert user of correct guess\n\n    // Shuffle images\n\n    // If clicked = true, set score to 0\n\n    // Reset all images clicked value to false\n\n    // Alert user of incorrect guess\n\n    // Shuffle images\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar> </NavBar>\n        <Header> </Header>\n        <Wrapper>\n          {/* Map over images array to render image thumbnails */}\n          {this.state.images.map(image => (\n\n            <Image\n              clickFunction={this.clickImage}\n              key={image.id}\n              id={image.id}\n              name={image.name}\n              src={process.env.PUBLIC_URL + image.src}\n            // process.env.PUBLIC_URL will look in the public folder for the images\n            // image={process.env.PUBLIC_URL + (passed parameter from map).image(?)}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}